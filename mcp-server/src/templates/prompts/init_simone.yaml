name: init_simone
description: Initialize or update Simone configuration for your project
arguments: []
template: |
  # Initialize Simone Configuration
  
  **IMPORTANT:** Follow from Top to Bottom - don't skip anything!
  
  **CREATE A TODO LIST** with exactly these 7 items:
  
  1. Check existing Simone files
  2. Analyze project structure
  3. Setup or update configuration
  4. Create or update constitution
  5. Create or update architecture document
  6. Verify Git and GitHub setup
  7. Complete initialization
  
  ## 1 Â· Check existing Simone files
  
  Check for the existence of these files in {{PROJECT_PATH}}/.simone/:
  - project.yaml (or project.yaml.template)
  - constitution.md (or constitution.md.template)
  - architecture.md (or architecture.md.template)
  
  Also check if {{PROJECT_PATH}}/CLAUDE.md exists (project-level Claude instructions).
  
  Document what exists and what's missing.
  
  {{#if simoneFiles.hasConfig}}
  If all core files exist (project configuration, constitution, architecture), get input from the user about what they want to update - configuration, constitution, architecture, or everything.
  {{/if}}
  
  ## 2 Â· Analyze project structure
  
  Use parallel Task agents to examine different folders simultaneously and understand:
  - What is the project about?
  - What programming language(s) is/are being used?
  - What framework(s) is/are used?
  - Which databases?
  - Is there any existing documentation/specification/guides?
  - Available scripts/commands
  - Directory organization and structure
  
  Determine if this project contains multiple independent packages/services or is a single unified codebase.
  
  If multiple packages/services detected, identify each as a separate context.
  
  Gather comprehensive information about the project's nature and technical stack.
  
  ## 3 Â· Setup or update configuration
  
  {{#if simoneFiles.hasConfig}}
  Read the existing project.yaml and verify/update:
  {{else}}
  Check if project.yaml.template exists. If yes:
  - Copy project.yaml.template to project.yaml
  - Remove the .template extension
  
  Fill in the configuration based on project analysis:
  {{/if}}
  
  - project.name: Project name from analysis or get from user
  - project.description: What the project is about
  - project.type: Set to "monorepo" if multiple packages detected, otherwise "single"
  - project.riskLevel: Get user preference for automation level (1-10 scale):
    - 1-3: Very careful, always ask for confirmation
    - 4-6: Balanced, confirm major changes
    - 7-10: More autonomous, minimal confirmations
  
  For contexts configuration:
  - Single unified codebase: Create one context
  - Multiple packages/services: Create one context for each
  - Analyze each context's technology stack separately
  
  For each context, configure:
  - stack: language, framework, database based on that context's code
  - tooling: commands specific to that context
  - methodology: development approach for that context
  
  Configure shared settings that apply across all contexts.
  
  - github: Set tool to "cli" and detect repository from git remote
  
  Write the updated project.yaml file.
  
  ## 4 Â· Create or update constitution
  
  {{#if simoneFiles.hasConstitution}}
  Read the existing constitution.md and get feedback from the user about needed updates.
  {{else}}
  Check if constitution.md.template exists. If yes:
  - Copy constitution.md.template to constitution.md
  - Remove the .template extension
  
  Analyze the project for existing conventions, standards, and practices.
  
  For projects with multiple packages/services, consider both shared standards and context-specific practices.
  
  Get input from the user about project principles, development standards, and team guidelines.
  
  Fill in the constitution based on analysis and user input.
  
  Write the constitution.md file.
  {{/if}}
  
  ## 5 Â· Create or update architecture document
  
  {{#if simoneFiles.hasArchitecture}}
  Read the existing architecture.md and get feedback from the user about needed updates.
  {{else}}
  Check if architecture.md.template exists. If yes:
  - Copy architecture.md.template to architecture.md
  - Remove the .template extension
  
  Analyze the codebase structure and organization.
  
  For projects with multiple packages/services, document how they interact and relate to each other.
  
  Get input from the user about the system architecture and design decisions.
  
  Create comprehensive architecture documentation based on analysis and user input.
  
  Write the architecture.md file.
  {{/if}}
  
  ## 6 Â· Verify Git and GitHub setup
  
  Check Git repository status and GitHub integration.
  
  If anything is missing or misconfigured, get confirmation from the user before making changes.
  
  Update project.yaml with correct GitHub settings if needed.
  
  ## 7 Â· Complete initialization
  
  Check if {{PROJECT_PATH}}/CLAUDE.md exists:
  
  If CLAUDE.md exists:
  - Ask the user: "Would you like to add activity logging instructions to your CLAUDE.md file?"
  - If yes, append this section to CLAUDE.md:
    ```
    ## Activity Logging
    
    You have access to the `log_activity` tool. Use it to record your activities after every activity that is relevant for the project. This helps track development progress and understand what has been done.
    ```
  
  If CLAUDE.md does not exist:
  - Inform the user: "No CLAUDE.md file found in your project. Please run Claude Code's project initialization to create this file first, then re-run Simone init to add activity logging instructions."
  
  {{#if simoneFiles.hasConfig}}
  Summarize what was updated and any manual steps needed.
  {{else}}
  Confirm all files were created successfully and suggest appropriate next steps.
  {{/if}}
  
  Use log_activity to record the initialization/update:
  - activity: "Initialized Simone configuration for project"
  - tool_name: "init_simone"
  - tags: ["configuration", "setup"]
  - files_affected: List all created/modified files
  
  âœ… **Result**: Simone configuration {{#if simoneFiles.hasConfig}}updated{{else}}initialized{{/if}} successfully
  
  ðŸ’¬ **Summary**: {{#if simoneFiles.hasConfig}}Updated Simone configuration files based on current project state{{else}}Created initial Simone configuration with constitution and architecture documentation{{/if}}